#include <iostream>

using namespace std;

int main()
{
    //creature 1
    
    //survivability
    string FirstCreatureName = "Lissiceous";
    bool FirstCreatureIsAWarden = false;
    bool FirstCreatureHasGuilt = false;
    bool FirstCreatureIsElder = false;
    int FirstCreatureMaxHealth = 2200;
    int FirstCreatureHealth = FirstCreatureMaxHealth;
    float FirstCreatureHealthRegen = 0.07;
    float FirstCreatureWeight = 2200;
    float FirstCreatureBleedDefense = 0.25;
    float FirstCreaturePoisoningDefense = 0;
    float FirstCreatureBurnDefense = 0;
    
    //defense
    float FirstCreatureThorns = 0;
    float FirstCreatureDefensiveBurn = 0;
    float FirstCreaturePoison = 1;
    
    //offense
    int FirstCreatureDamage = 180;
    float FirstCreatureAttackSpeed = 0.6;
    float FirstCreatureBleed = 0;
    float FirstCreatureVenom = 2;
    float FirstCreatureBurn = 0;
    
    
    //creature 2
    
    //survivability
    string SecondCreatureName = "Keruku";
    bool SecondCreatureIsAWarden = false;
    bool SecondCreatureHasGuilt = false;
    bool SecondCreatureIsElder = false;
    int SecondCreatureMaxHealth = 2750;
    int SecondCreatureHealth = SecondCreatureMaxHealth;
    float SecondCreatureHealthRegen = 0.06;
    float SecondCreatureWeight = 1938;
    float SecondCreatureBleedDefense = 0.75;
    float SecondCreaturePoisoningDefense = 0;
    float SecondCreatureBurnDefense = 0;
    
    //defense
    float SecondCreatureThorns = 0;
    float SecondCreatureDefensiveBurn = 0;
    float SecondCreaturePoison = 0;
    
    //offense
    int SecondCreatureDamage = 180;
    float SecondCreatureAttackSpeed = 0.8;
    float SecondCreatureBleed = 0;
    float SecondCreatureVenom = 0;
    float SecondCreatureBurn = 0;
    
    
    if (FirstCreatureIsElder == true)
    {
        FirstCreatureMaxHealth
        FirstCreatureDamage += FirstCreatureDamage * 0.2;
        FirstCreatureWeight += FirstCreatureWeight * 0.25;
    }
    
    float FirstCreatureWeightDifference = 0;
    float SecondCreatureWeightDifference = 0;
    
    
    FirstCreatureWeightDifference = FirstCreatureWeight / SecondCreatureWeight;
    
    if (FirstCreatureWeightDifference < 0.5)
    {
        FirstCreatureWeightDifference = 0.5;
    }
    else if (FirstCreatureWeightDifference > 2)
    {
        FirstCreatureWeightDifference = 2;
    }
    
    cout << FirstCreatureWeightDifference;
    
    SecondCreatureWeightDifference = SecondCreatureWeight / FirstCreatureWeight;
    
    if (SecondCreatureWeightDifference < 0.5)
    {
        SecondCreatureWeightDifference = 0.5;
    }
    else if (SecondCreatureWeightDifference > 2)
    {
        SecondCreatureWeightDifference = 2;
    }
    
    FirstCreatureDamage = FirstCreatureDamage * FirstCreatureWeightDifference;
    SecondCreatureDamage = SecondCreatureDamage * SecondCreatureWeightDifference;
    
    if (FirstCreatureHasGuilt == 1)
    {
        SecondCreatureDamage = SecondCreatureDamage / 2;
    }
    if (SecondCreatureHasGuilt == 1)
    {
        FirstCreatureDamage = FirstCreatureDamage / 2;
    }
    
    
    //statuses
    float FirstCreatureBleedAmount = 0;
    float FirstCreaturePoisoningAmount = 0;
    float FirstCreatureBurnAmount = 0;
    
    float SecondCreatureBleedAmount = 0;
    float SecondCreaturePoisoningAmount = 0;
    float SecondCreatureBurnAmount = 0;
    
    
    //timings
    float FirstCreatureAttackSpeedTiming = 0;
    float SecondCreatureAttackSpeedTiming = 0;
    
    float StatusTiming = 0;
    float RegenTiming = 0;
    
    //tracking
    float TimeElapsed = 0;
    
    int FirstCreatureAttackAmount = 0;
    int FirstCreatureHealthRegened = 0;
    
    
    int SecondCreatureAttackAmount = 0;
    int SecondCreatureHealthRegened = 0;
    
    
    while (FirstCreatureHealth > 0 && SecondCreatureHealth > 0)
    {
        FirstCreatureAttackSpeedTiming += 0.1;
        SecondCreatureAttackSpeedTiming += 0.1;
        StatusTiming += 0.1;
        
        TimeElapsed += 0.1;
        
        
        if (FirstCreatureAttackSpeedTiming >= FirstCreatureAttackSpeed)
        {
            cout << FirstCreatureName << " bit for " << FirstCreatureDamage << " damage...\n";
            if (FirstCreatureIsAWarden == true)
            {
                float FirstWardenDamageMulti = 1;
                float FirstWardenHealthDifference = 2 * (FirstCreatureHealth / FirstCreatureMaxHealth);
                FirstWardenDamageMulti += 7.5 * (1 - FirstWardenHealthDifference);
                if (FirstWardenDamageMulti > 8.5)
                {
                    FirstWardenDamageMulti = 8.5;
                }
                SecondCreatureHealth -= FirstCreatureDamage * FirstWardenDamageMulti;
            }
            
            else
            {
                SecondCreatureHealth -= FirstCreatureDamage;
            }
            
            SecondCreatureBleedAmount += FirstCreatureBleed * (1 - SecondCreatureBleedDefense);
            SecondCreaturePoisoningAmount += FirstCreatureVenom * (1 - SecondCreaturePoisoningDefense);
            SecondCreatureBurnAmount += FirstCreatureBurn * (1 - SecondCreatureBurnDefense);
            
            FirstCreatureBleedAmount += SecondCreatureThorns;
            FirstCreaturePoisoningAmount += SecondCreaturePoison * (1 - FirstCreaturePoisoningDefense);
            FirstCreatureBurnAmount += SecondCreatureDefensiveBurn * (1 - FirstCreatureBurnDefense);
            
            FirstCreatureAttackSpeedTiming = 0;
            FirstCreatureAttackAmount++;
        }
        
        if (SecondCreatureAttackSpeedTiming >= SecondCreatureAttackSpeed)
        {
            cout << SecondCreatureName << " bit for " << SecondCreatureDamage << " damage...\n";
            if (SecondCreatureIsAWarden == true)
            {
                float SecondWardenDamageMulti = 1;
                float SecondWardenHealthDifference = 2 * (SecondCreatureHealth / SecondCreatureMaxHealth);
                SecondWardenDamageMulti += 7.5 * (1 - SecondWardenHealthDifference);
                if (SecondWardenDamageMulti > 8.5)
                {
                    SecondWardenDamageMulti = 8.5;
                }
                FirstCreatureHealth -= SecondCreatureDamage * SecondWardenDamageMulti;
            }
            
            else
            {
                FirstCreatureHealth -= SecondCreatureDamage;
            }
            
            FirstCreatureBleedAmount += SecondCreatureBleed * (1 - FirstCreatureBleedDefense);
            FirstCreaturePoisoningAmount += SecondCreatureVenom * (1 - FirstCreaturePoisoningDefense);
            FirstCreatureBurnAmount += SecondCreatureBurn * (1 - FirstCreatureBurnDefense);
            
            SecondCreatureBleedAmount += FirstCreatureThorns;
            SecondCreaturePoisoningAmount += FirstCreaturePoison * (1 - FirstCreaturePoisoningDefense);
            SecondCreatureBurnAmount += FirstCreatureDefensiveBurn * (1 - FirstCreatureBurnDefense);
            
            SecondCreatureAttackSpeedTiming = 0;
            SecondCreatureAttackAmount++;
        }
        
        
        if (RegenTiming >= 15)
        {
            if (FirstCreatureBleedAmount == 0 && FirstCreatureBurnAmount == 0)
            {
                FirstCreatureHealth += FirstCreatureMaxHealth * FirstCreatureHealthRegen;
                FirstCreatureHealthRegened += FirstCreatureMaxHealth * FirstCreatureHealthRegen;
            }
            
            if (SecondCreatureBleedAmount == 0 && SecondCreatureBurnAmount == 0)
            {
                SecondCreatureHealth += SecondCreatureMaxHealth * SecondCreatureHealthRegen;
                SecondCreatureHealthRegened += SecondCreatureMaxHealth * SecondCreatureHealthRegen;
            }
            
            RegenTiming = 0;
        }
        
        
        if (StatusTiming >= 3)
        {
            if (FirstCreatureBleedAmount > 0)
            {
                FirstCreatureHealth -= FirstCreatureBleedAmount * 2;
                cout << FirstCreatureName << " bled for " << FirstCreatureBurnAmount * 2 << " damage...\n";
            }
            
            if (FirstCreatureBurnAmount > 0)
            {
                float FirstCreatureBurnDamage = 1 + (FirstCreatureBurnAmount * 0.5);
                FirstCreatureBurnDamage = FirstCreatureBurnDamage / 100;
                FirstCreatureBurnDamage = FirstCreatureMaxHealth * FirstCreatureBurnDamage;
                FirstCreatureHealth -= FirstCreatureBurnDamage;
                cout << FirstCreatureName << " took " << FirstCreatureBurnDamage << " damage from its burns...\n";
            }
            
            if (FirstCreaturePoisoningAmount > 0)
            {
                float FirstCreaturePoisonDamage = 1 + (FirstCreaturePoisoningAmount * 0.5);
                FirstCreaturePoisonDamage = FirstCreaturePoisonDamage / 100;
                FirstCreaturePoisonDamage = FirstCreatureMaxHealth * FirstCreaturePoisonDamage;
                FirstCreatureHealth -= FirstCreaturePoisonDamage;
                cout << FirstCreatureName << " took " << FirstCreaturePoisonDamage << " damage from its poisoning...\n";
            }
            
            FirstCreatureBleedAmount -= 1;
            FirstCreaturePoisoningAmount -= 1;
            FirstCreatureBurnAmount -= 1;
            
            if (FirstCreatureBleedAmount < 0)
            {
                FirstCreatureBleedAmount = 0;
            }
            
            if (FirstCreaturePoisoningAmount < 0)
            {
                FirstCreaturePoisoningAmount = 0;
            }
            
            if (FirstCreatureBurnAmount < 0)
            {
                FirstCreatureBurnAmount = 0;
            }
            
            if (SecondCreatureBleedAmount > 0)
            {
                SecondCreatureHealth -= SecondCreatureBleedAmount * 2;
                cout << SecondCreatureName << " bled for " << SecondCreatureBurnAmount * 2 << " damage...\n";
            }
            
            if (SecondCreatureBurnAmount > 0)
            {
                float SecondCreatureBurnDamage = 1 + (SecondCreatureBurnAmount * 0.5);
                SecondCreatureBurnDamage = SecondCreatureBurnDamage / 100;
                SecondCreatureBurnDamage = SecondCreatureMaxHealth * SecondCreatureBurnDamage;
                SecondCreatureHealth -= SecondCreatureBurnDamage;
                cout << SecondCreatureName << " took " << SecondCreatureBurnDamage << " damage from its burns...\n";
            }
            
            if (SecondCreaturePoisoningAmount > 0)
            {
                float SecondCreaturePoisonDamage = 1 + (SecondCreaturePoisoningAmount * 0.5);
                SecondCreaturePoisonDamage = SecondCreaturePoisonDamage / 100;
                SecondCreaturePoisonDamage = SecondCreatureMaxHealth * SecondCreaturePoisonDamage;
                SecondCreatureHealth -= SecondCreaturePoisonDamage;
                cout << SecondCreatureName << " took " << SecondCreaturePoisonDamage << " damage from its poisoning...\n";
            }
            
            SecondCreatureBleedAmount -= 1;
            SecondCreaturePoisoningAmount -= 1;
            SecondCreatureBurnAmount -= 1;
            
            if (SecondCreatureBleedAmount < 0)
            {
                SecondCreatureBleedAmount = 0;
            }
            
            if (SecondCreaturePoisoningAmount < 0)
            {
                SecondCreaturePoisoningAmount = 0;
            }
            
            if (SecondCreatureBurnAmount < 0)
            {
                SecondCreatureBurnAmount = 0;
            }
            
            StatusTiming = 0;
        }
        
        
        cout << FirstCreatureName << "'s Health: " << FirstCreatureHealth << endl;
        cout << SecondCreatureName << "'s Health: " << SecondCreatureHealth << endl << endl << endl;
    }
    
    bool WinningCreature = 0;
    
    if (FirstCreatureHealth > SecondCreatureHealth)
    {
        WinningCreature = 0;
    }
    
    else if (SecondCreatureHealth > FirstCreatureHealth)
    {
        WinningCreature = 1;
    }
    
    else
    {
        cout << "The battle was a tie or something went wrong...";
    }
    
    float FirstCreatureHealthPerc = 100 * FirstCreatureHealth / FirstCreatureMaxHealth;
    float SecondCreatureHealthPerc = 100 * SecondCreatureHealth / SecondCreatureMaxHealth;
    
    if (WinningCreature == 0)
    {
        cout << FirstCreatureName << " wins\n";
        cout << FirstCreatureName << " had " << FirstCreatureHealth << "/" << FirstCreatureMaxHealth << " (~" << FirstCreatureHealthPerc << "%) health left.\n";
        cout << FirstCreatureName << " regened " << FirstCreatureHealthRegened << " health during the fight.\n";
        if (FirstCreatureBleedAmount > 0 || FirstCreaturePoisoningAmount > 0 || FirstCreatureBurnAmount > 0)
        {
            cout << FirstCreatureName << " was left with " << FirstCreatureBleedAmount << " bleed, " << FirstCreaturePoisoningAmount << " poison and " << FirstCreatureBurnAmount << " burn.\n";
        }
    }
    
    else if (WinningCreature == 1)
    {
        cout << SecondCreatureName << " wins\n";
        cout << SecondCreatureName << " had " << SecondCreatureHealth << "/" << SecondCreatureMaxHealth << " (~" << SecondCreatureHealthPerc << "%) health left.\n";
        cout << SecondCreatureName << " regened " << SecondCreatureHealthRegened << " health during the fight.\n";
        if (SecondCreatureBleedAmount > 0 || SecondCreaturePoisoningAmount > 0 || SecondCreatureBurnAmount > 0)
        {
            cout << SecondCreatureName << " was left with " << SecondCreatureBleedAmount << " bleed, " << SecondCreaturePoisoningAmount << " poison and " << SecondCreatureBurnAmount << " burn.\n";
        }
    }
    
    cout << "This battle took/would take about " << TimeElapsed << " seconds.\n\n";
    cout << FirstCreatureName << " attacked " << FirstCreatureAttackAmount << " times.\n";
    cout << SecondCreatureName << " attacked " << SecondCreatureAttackAmount << " times.\n";
    
}
